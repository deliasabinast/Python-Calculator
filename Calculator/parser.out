Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> calc
Rule 1     calc -> expression
Rule 2     calc -> empty
Rule 3     expression -> FUNCTION LP expression RP
Rule 4     expression -> expression POW expression
Rule 5     expression -> expression MUL expression
Rule 6     expression -> expression DIV expression
Rule 7     expression -> expression PLUS expression
Rule 8     expression -> expression MINUS expression
Rule 9     expression -> MINUS expression
Rule 10    expression -> INT
Rule 11    expression -> FLOAT
Rule 12    empty -> <empty>

Terminals, with rules where they appear

DIV                  : 6
FLOAT                : 11
FUNCTION             : 3
INT                  : 10
LP                   : 3
MINUS                : 8 9
MUL                  : 5
PLUS                 : 7
POW                  : 4
RP                   : 3
error                : 

Nonterminals, with rules where they appear

calc                 : 0
empty                : 2
expression           : 1 3 4 4 5 5 6 6 7 7 8 8 9

Parsing method: LALR

state 0

    (0) S' -> . calc
    (1) calc -> . expression
    (2) calc -> . empty
    (3) expression -> . FUNCTION LP expression RP
    (4) expression -> . expression POW expression
    (5) expression -> . expression MUL expression
    (6) expression -> . expression DIV expression
    (7) expression -> . expression PLUS expression
    (8) expression -> . expression MINUS expression
    (9) expression -> . MINUS expression
    (10) expression -> . INT
    (11) expression -> . FLOAT
    (12) empty -> .

    FUNCTION        shift and go to state 4
    MINUS           shift and go to state 5
    INT             shift and go to state 6
    FLOAT           shift and go to state 7
    $end            reduce using rule 12 (empty -> .)

    calc                           shift and go to state 1
    expression                     shift and go to state 2
    empty                          shift and go to state 3

state 1

    (0) S' -> calc .



state 2

    (1) calc -> expression .
    (4) expression -> expression . POW expression
    (5) expression -> expression . MUL expression
    (6) expression -> expression . DIV expression
    (7) expression -> expression . PLUS expression
    (8) expression -> expression . MINUS expression

    $end            reduce using rule 1 (calc -> expression .)
    POW             shift and go to state 8
    MUL             shift and go to state 9
    DIV             shift and go to state 10
    PLUS            shift and go to state 11
    MINUS           shift and go to state 12


state 3

    (2) calc -> empty .

    $end            reduce using rule 2 (calc -> empty .)


state 4

    (3) expression -> FUNCTION . LP expression RP

    LP              shift and go to state 13


state 5

    (9) expression -> MINUS . expression
    (3) expression -> . FUNCTION LP expression RP
    (4) expression -> . expression POW expression
    (5) expression -> . expression MUL expression
    (6) expression -> . expression DIV expression
    (7) expression -> . expression PLUS expression
    (8) expression -> . expression MINUS expression
    (9) expression -> . MINUS expression
    (10) expression -> . INT
    (11) expression -> . FLOAT

    FUNCTION        shift and go to state 4
    MINUS           shift and go to state 5
    INT             shift and go to state 6
    FLOAT           shift and go to state 7

    expression                     shift and go to state 14

state 6

    (10) expression -> INT .

    POW             reduce using rule 10 (expression -> INT .)
    MUL             reduce using rule 10 (expression -> INT .)
    DIV             reduce using rule 10 (expression -> INT .)
    PLUS            reduce using rule 10 (expression -> INT .)
    MINUS           reduce using rule 10 (expression -> INT .)
    $end            reduce using rule 10 (expression -> INT .)
    RP              reduce using rule 10 (expression -> INT .)


state 7

    (11) expression -> FLOAT .

    POW             reduce using rule 11 (expression -> FLOAT .)
    MUL             reduce using rule 11 (expression -> FLOAT .)
    DIV             reduce using rule 11 (expression -> FLOAT .)
    PLUS            reduce using rule 11 (expression -> FLOAT .)
    MINUS           reduce using rule 11 (expression -> FLOAT .)
    $end            reduce using rule 11 (expression -> FLOAT .)
    RP              reduce using rule 11 (expression -> FLOAT .)


state 8

    (4) expression -> expression POW . expression
    (3) expression -> . FUNCTION LP expression RP
    (4) expression -> . expression POW expression
    (5) expression -> . expression MUL expression
    (6) expression -> . expression DIV expression
    (7) expression -> . expression PLUS expression
    (8) expression -> . expression MINUS expression
    (9) expression -> . MINUS expression
    (10) expression -> . INT
    (11) expression -> . FLOAT

    FUNCTION        shift and go to state 4
    MINUS           shift and go to state 5
    INT             shift and go to state 6
    FLOAT           shift and go to state 7

    expression                     shift and go to state 15

state 9

    (5) expression -> expression MUL . expression
    (3) expression -> . FUNCTION LP expression RP
    (4) expression -> . expression POW expression
    (5) expression -> . expression MUL expression
    (6) expression -> . expression DIV expression
    (7) expression -> . expression PLUS expression
    (8) expression -> . expression MINUS expression
    (9) expression -> . MINUS expression
    (10) expression -> . INT
    (11) expression -> . FLOAT

    FUNCTION        shift and go to state 4
    MINUS           shift and go to state 5
    INT             shift and go to state 6
    FLOAT           shift and go to state 7

    expression                     shift and go to state 16

state 10

    (6) expression -> expression DIV . expression
    (3) expression -> . FUNCTION LP expression RP
    (4) expression -> . expression POW expression
    (5) expression -> . expression MUL expression
    (6) expression -> . expression DIV expression
    (7) expression -> . expression PLUS expression
    (8) expression -> . expression MINUS expression
    (9) expression -> . MINUS expression
    (10) expression -> . INT
    (11) expression -> . FLOAT

    FUNCTION        shift and go to state 4
    MINUS           shift and go to state 5
    INT             shift and go to state 6
    FLOAT           shift and go to state 7

    expression                     shift and go to state 17

state 11

    (7) expression -> expression PLUS . expression
    (3) expression -> . FUNCTION LP expression RP
    (4) expression -> . expression POW expression
    (5) expression -> . expression MUL expression
    (6) expression -> . expression DIV expression
    (7) expression -> . expression PLUS expression
    (8) expression -> . expression MINUS expression
    (9) expression -> . MINUS expression
    (10) expression -> . INT
    (11) expression -> . FLOAT

    FUNCTION        shift and go to state 4
    MINUS           shift and go to state 5
    INT             shift and go to state 6
    FLOAT           shift and go to state 7

    expression                     shift and go to state 18

state 12

    (8) expression -> expression MINUS . expression
    (3) expression -> . FUNCTION LP expression RP
    (4) expression -> . expression POW expression
    (5) expression -> . expression MUL expression
    (6) expression -> . expression DIV expression
    (7) expression -> . expression PLUS expression
    (8) expression -> . expression MINUS expression
    (9) expression -> . MINUS expression
    (10) expression -> . INT
    (11) expression -> . FLOAT

    FUNCTION        shift and go to state 4
    MINUS           shift and go to state 5
    INT             shift and go to state 6
    FLOAT           shift and go to state 7

    expression                     shift and go to state 19

state 13

    (3) expression -> FUNCTION LP . expression RP
    (3) expression -> . FUNCTION LP expression RP
    (4) expression -> . expression POW expression
    (5) expression -> . expression MUL expression
    (6) expression -> . expression DIV expression
    (7) expression -> . expression PLUS expression
    (8) expression -> . expression MINUS expression
    (9) expression -> . MINUS expression
    (10) expression -> . INT
    (11) expression -> . FLOAT

    FUNCTION        shift and go to state 4
    MINUS           shift and go to state 5
    INT             shift and go to state 6
    FLOAT           shift and go to state 7

    expression                     shift and go to state 20

state 14

    (9) expression -> MINUS expression .
    (4) expression -> expression . POW expression
    (5) expression -> expression . MUL expression
    (6) expression -> expression . DIV expression
    (7) expression -> expression . PLUS expression
    (8) expression -> expression . MINUS expression

    POW             reduce using rule 9 (expression -> MINUS expression .)
    MUL             reduce using rule 9 (expression -> MINUS expression .)
    DIV             reduce using rule 9 (expression -> MINUS expression .)
    PLUS            reduce using rule 9 (expression -> MINUS expression .)
    MINUS           reduce using rule 9 (expression -> MINUS expression .)
    $end            reduce using rule 9 (expression -> MINUS expression .)
    RP              reduce using rule 9 (expression -> MINUS expression .)

  ! POW             [ shift and go to state 8 ]
  ! MUL             [ shift and go to state 9 ]
  ! DIV             [ shift and go to state 10 ]
  ! PLUS            [ shift and go to state 11 ]
  ! MINUS           [ shift and go to state 12 ]


state 15

    (4) expression -> expression POW expression .
    (4) expression -> expression . POW expression
    (5) expression -> expression . MUL expression
    (6) expression -> expression . DIV expression
    (7) expression -> expression . PLUS expression
    (8) expression -> expression . MINUS expression

    POW             reduce using rule 4 (expression -> expression POW expression .)
    MUL             reduce using rule 4 (expression -> expression POW expression .)
    DIV             reduce using rule 4 (expression -> expression POW expression .)
    PLUS            reduce using rule 4 (expression -> expression POW expression .)
    MINUS           reduce using rule 4 (expression -> expression POW expression .)
    $end            reduce using rule 4 (expression -> expression POW expression .)
    RP              reduce using rule 4 (expression -> expression POW expression .)

  ! POW             [ shift and go to state 8 ]
  ! MUL             [ shift and go to state 9 ]
  ! DIV             [ shift and go to state 10 ]
  ! PLUS            [ shift and go to state 11 ]
  ! MINUS           [ shift and go to state 12 ]


state 16

    (5) expression -> expression MUL expression .
    (4) expression -> expression . POW expression
    (5) expression -> expression . MUL expression
    (6) expression -> expression . DIV expression
    (7) expression -> expression . PLUS expression
    (8) expression -> expression . MINUS expression

    MUL             reduce using rule 5 (expression -> expression MUL expression .)
    DIV             reduce using rule 5 (expression -> expression MUL expression .)
    PLUS            reduce using rule 5 (expression -> expression MUL expression .)
    MINUS           reduce using rule 5 (expression -> expression MUL expression .)
    $end            reduce using rule 5 (expression -> expression MUL expression .)
    RP              reduce using rule 5 (expression -> expression MUL expression .)
    POW             shift and go to state 8

  ! POW             [ reduce using rule 5 (expression -> expression MUL expression .) ]
  ! MUL             [ shift and go to state 9 ]
  ! DIV             [ shift and go to state 10 ]
  ! PLUS            [ shift and go to state 11 ]
  ! MINUS           [ shift and go to state 12 ]


state 17

    (6) expression -> expression DIV expression .
    (4) expression -> expression . POW expression
    (5) expression -> expression . MUL expression
    (6) expression -> expression . DIV expression
    (7) expression -> expression . PLUS expression
    (8) expression -> expression . MINUS expression

    MUL             reduce using rule 6 (expression -> expression DIV expression .)
    DIV             reduce using rule 6 (expression -> expression DIV expression .)
    PLUS            reduce using rule 6 (expression -> expression DIV expression .)
    MINUS           reduce using rule 6 (expression -> expression DIV expression .)
    $end            reduce using rule 6 (expression -> expression DIV expression .)
    RP              reduce using rule 6 (expression -> expression DIV expression .)
    POW             shift and go to state 8

  ! POW             [ reduce using rule 6 (expression -> expression DIV expression .) ]
  ! MUL             [ shift and go to state 9 ]
  ! DIV             [ shift and go to state 10 ]
  ! PLUS            [ shift and go to state 11 ]
  ! MINUS           [ shift and go to state 12 ]


state 18

    (7) expression -> expression PLUS expression .
    (4) expression -> expression . POW expression
    (5) expression -> expression . MUL expression
    (6) expression -> expression . DIV expression
    (7) expression -> expression . PLUS expression
    (8) expression -> expression . MINUS expression

    PLUS            reduce using rule 7 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 7 (expression -> expression PLUS expression .)
    $end            reduce using rule 7 (expression -> expression PLUS expression .)
    RP              reduce using rule 7 (expression -> expression PLUS expression .)
    POW             shift and go to state 8
    MUL             shift and go to state 9
    DIV             shift and go to state 10

  ! POW             [ reduce using rule 7 (expression -> expression PLUS expression .) ]
  ! MUL             [ reduce using rule 7 (expression -> expression PLUS expression .) ]
  ! DIV             [ reduce using rule 7 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 11 ]
  ! MINUS           [ shift and go to state 12 ]


state 19

    (8) expression -> expression MINUS expression .
    (4) expression -> expression . POW expression
    (5) expression -> expression . MUL expression
    (6) expression -> expression . DIV expression
    (7) expression -> expression . PLUS expression
    (8) expression -> expression . MINUS expression

    PLUS            reduce using rule 8 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 8 (expression -> expression MINUS expression .)
    $end            reduce using rule 8 (expression -> expression MINUS expression .)
    RP              reduce using rule 8 (expression -> expression MINUS expression .)
    POW             shift and go to state 8
    MUL             shift and go to state 9
    DIV             shift and go to state 10

  ! POW             [ reduce using rule 8 (expression -> expression MINUS expression .) ]
  ! MUL             [ reduce using rule 8 (expression -> expression MINUS expression .) ]
  ! DIV             [ reduce using rule 8 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 11 ]
  ! MINUS           [ shift and go to state 12 ]


state 20

    (3) expression -> FUNCTION LP expression . RP
    (4) expression -> expression . POW expression
    (5) expression -> expression . MUL expression
    (6) expression -> expression . DIV expression
    (7) expression -> expression . PLUS expression
    (8) expression -> expression . MINUS expression

    RP              shift and go to state 21
    POW             shift and go to state 8
    MUL             shift and go to state 9
    DIV             shift and go to state 10
    PLUS            shift and go to state 11
    MINUS           shift and go to state 12


state 21

    (3) expression -> FUNCTION LP expression RP .

    POW             reduce using rule 3 (expression -> FUNCTION LP expression RP .)
    MUL             reduce using rule 3 (expression -> FUNCTION LP expression RP .)
    DIV             reduce using rule 3 (expression -> FUNCTION LP expression RP .)
    PLUS            reduce using rule 3 (expression -> FUNCTION LP expression RP .)
    MINUS           reduce using rule 3 (expression -> FUNCTION LP expression RP .)
    $end            reduce using rule 3 (expression -> FUNCTION LP expression RP .)
    RP              reduce using rule 3 (expression -> FUNCTION LP expression RP .)

